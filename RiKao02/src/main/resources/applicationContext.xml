<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
	xmlns:jee="http://www.springframework.org/schema/jee" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.1.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd">
	
	<!-- 1. Handler  配置了这个Spring就指定我们启动注解驱动  -->
	<mvc:annotation-driven/>
	<!-- 2. 组件扫描 
		会自动为我们扫描@Service、
		@Controller、@Repository 等注解标记的组件注册到工厂中，来处理我们的请求 -->
	<context:component-scan base-package="com.bw"></context:component-scan>

	<!-- 3. 视图解析器 -->
	<!-- 前缀 + 视图名称 + 后缀 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 前缀 -->
		<property name="prefix" value="/"></property>
		<!-- 后缀 -->
		<property name="suffix" value=".jsp"></property>
	</bean>
	
	<!-- 加载 资源文件 -->
	<context:property-placeholder location="classpath:db.properties"/>
	
	
	<!-- 上传解析器 name必须是multipartResolver
	 maxUploadSize 以B为单位
	 
	 	enctype="multipart/form-data"
	 -->
	<bean name="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="utf-8"></property>
		<property name="maxUploadSize" value="100000000"></property>
	</bean>
	
	
	<!-- 4. 配置数据源 -->
	 <bean id="c3p0" class="com.mchange.v2.c3p0.ComboPooledDataSource">
	 	<property name="user" value="${mysql.username}"></property>
	 	<property name="password" value="${mysql.password}"></property>
	 	<property name="driverClass" value="${mysql.driver}"></property>
	 	<property name="jdbcUrl" value="${mysql.url}"></property>
	 </bean>
	<!-- 5. SqlSessionFactoryBean 创建SqlSessionFactory对象，为整合应用提供SqlSession对象资源
		配置sqlSessionFactoryBean，目的：加载mybatis配置文件和映射文件，即替代原mybatis工具类的作用 -->
	
	<bean id="factory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 注入数据源 -->
		<property name="dataSource" ref="c3p0"></property>
		
		<!-- 加载mapper映射文件，好处 可以省略mybatis主配置文件 -->
		<!-- <property name="mapperLocations" value="classpath:com/bw/mapper/*Mapper.xml"></property> -->
		
		<!-- 加载mybatis主配置文件，可以直接在mybatis 主配置文件中加载分页插件比较方便 -->
		<property name="configLocation" value="classpath:sqlmap-config.xml"></property>
		
	</bean>
	
	<!-- 6. 创建mapper扫描器 MapperScannerConfigurer 根据指定包批量扫描Mapper接口并生成实例 -->
	<bean  class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 指定扫描的包路径 -->
		<property name="basePackage" value="com.bw.Dao"></property>
		<!-- 
			在mybatis-spring1.1.0以前，是通过<property name="sqlSessionFactory" ref="sqlSessionFactory"/>
			将SqlSessionFactory对象注入到sqlSessionFactory，这样做可能会有一个问题，就是在初始化MyBatis时，
			jdbc.properties文件还没被加载进来，dataSource的属性值没有被替换，就开始构造sqlSessionFactory类，
			属性值就会加载失败。在1.1.0以后，MapperScannerConfigure提供了String类型的sqlSessionFactoryBeanName，
			这样将bean name注入到sqlSessionFactoryBeanName，这样就会等到spring初始化完成后，再构建sqlSessionFactory。
		 -->
		<!-- <property name="sqlSessionFactory" ref="factory"></property> -->
		<property name="sqlSessionFactoryBeanName" value="factory"></property>
		
	</bean>
	<!-- 7. 配置MyBatis的事务管理器，因为MyBatis底层用的是JDBC事务管理器，所以在这里依然配置JDBC事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="c3p0"></property>
	</bean>

	<!-- 8. 声明式事务管理  -->
	<tx:annotation-driven transaction-manager="transactionManager"/>	
	
    
</beans>